<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFramework.Utility</name>
    </assembly>
    <members>
        <member name="T:IFramework.Utility.Astar.AStarMap2X">
            <summary>
            二维A* 地图
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap2X.Item(IFramework.Point2)">
            <summary>
            便于调用点位
            </summary>
            <returns></returns>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap2X.walkSideways">
            <summary>
            是否可以斜着走
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.GetHCost(IFramework.Utility.Astar.AStarNode2X,IFramework.Utility.Astar.AStarNode2X)">
            <summary>
            计算地图上两点距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.GetNeighborNodes(IFramework.Utility.Astar.AStarNode2X)">
            <summary>
            获取邻居节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.ReadMap``1(System.Func{``0,IFramework.Utility.Astar.AStarNodeType},``0[0:,0:],System.Boolean)">
            <summary>
            加载地图
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">更具输入数据转化为NodeType</param>
            <param name="arr">二维数组</param>
            <param name="walkSideways">是否可以斜着走</param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.Reset">
            <summary>
            重置地图数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarMap3X">
            <summary>
            三维A* 地图
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap3X.walkSideways">
            <summary>
            是否可以斜着走
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap3X.Item(IFramework.Point3)">
            <summary>
            便于调用点位
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.ReadMap``1(System.Func{``0,IFramework.Utility.Astar.AStarNodeType},``0[0:,0:,0:],System.Boolean)">
            <summary>
            加载地图
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">更具输入数据转化为NodeType</param>
            <param name="arr">二维数组</param>
            <param name="walkSideways">是否可以斜着走</param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.GetHCost(IFramework.Utility.Astar.AStarNode3X,IFramework.Utility.Astar.AStarNode3X)">
            <summary>
            计算地图上两点距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.GetNeighborNodes(IFramework.Utility.Astar.AStarNode3X)">
            <summary>
            获取邻居节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.Reset">
            <summary>
            重置地图数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarNode2X">
            <summary>
            二维 A* 地图节点
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode2X.nodeType">
            <summary>
            节点类型（是否可以行走）
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode2X.parentNode">
            <summary>
            父节点，用于返回路径
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode2X.mapPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.#ctor(IFramework.Point2,IFramework.Utility.Astar.AStarNodeType)">
            <summary>
            ctor
            </summary>
            <param name="mapPos"></param>
            <param name="nodeType"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.SetDefaultParent(IFramework.Utility.Astar.IAStarNode)">
            <summary>
            设置默认父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.TryUpdateFCost(System.Single,System.Single,IFramework.Utility.Astar.IAStarNode)">
            <summary>
            尝试更新最短距离
            </summary>
            <param name="g"></param>
            <param name="h"></param>
            <param name="trySetNode"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.Reset">
            <summary>
            重置节点数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarNode3X">
            <summary>
            三维 A* 地图节点
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode3X.nodeType">
            <summary>
            节点类型（是否可以行走）
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode3X.parentNode">
            <summary>
            父节点，用于返回路径
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode3X.mapPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.#ctor(IFramework.Point3,IFramework.Utility.Astar.AStarNodeType)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.SetDefaultParent(IFramework.Utility.Astar.IAStarNode)">
            <summary>
            设置默认父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.TryUpdateFCost(System.Single,System.Single,IFramework.Utility.Astar.IAStarNode)">
            <summary>
            尝试更新最短距离
            </summary>
            <param name="g"></param>
            <param name="h"></param>
            <param name="trySetNode"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.Reset">
            <summary>
            重置节点数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarNodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:IFramework.Utility.Astar.AStarNodeType.Wall">
            <summary>
            不可行走
            </summary>
        </member>
        <member name="F:IFramework.Utility.Astar.AStarNodeType.Walkable">
            <summary>
            可行走
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.IAstarMap`1">
            <summary>
            地图
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Utility.Astar.IAstarMap`1.walkSideways">
            <summary>
            是否可以斜着走
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.IAstarMap`1.GetNeighborNodes(`0)">
            <summary>
            获取邻居节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAstarMap`1.GetHCost(`0,`0)">
            <summary>
            获取两点之间距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAstarMap`1.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.IAStarNode">
            <summary>
            A*节点
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.IAStarNode.nodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.IAStarNode.parentNode">
            <summary>
            父节点，用于寻路递归
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarNode.SetDefaultParent(IFramework.Utility.Astar.IAStarNode)">
            <summary>
            设置默认父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarNode.TryUpdateFCost(System.Single,System.Single,IFramework.Utility.Astar.IAStarNode)">
            <summary>
            尝试刷新数据
            </summary>
            <param name="g"></param>
            <param name="h"></param>
            <param name="trySetNode"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarNode.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.IAStarSearcher`2">
            <summary>
            A* 路径搜寻者
            </summary>
            <typeparam name="Node">A* 节点类型</typeparam>
            <typeparam name="Map">A* 地图leix</typeparam>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarSearcher`2.Search(`0,`0)">
            <summary>
            寻路
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
            <returns>节点路径</returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarSearcher`2.LoadMap(`1)">
            <summary>
            加载 A* 地图
            </summary>
            <param name="map"></param>
        </member>
        <member name="T:IFramework.Utility.DeepCopy">
            <summary>
            深拷贝
            </summary>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.ReflectionDeepCopy``1(``0)">
            <summary>
            0.9281 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.ReflectionDeepCopy(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.XmlDeepCopy``1(``0)">
            <summary>
            1.6543 public
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.BinaryDeepCopy``1(``0)">
            <summary>
            1.7278 [Serializable]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Encryption.HashEncode.GetSecurity">
            得到随机哈希加密字符串
        </member>
        <member name="M:IFramework.Utility.Encryption.HashEncode.GetRandomValue">
            得到一个随机数值
        </member>
        <member name="M:IFramework.Utility.Encryption.HashEncode.HashEncoding(System.String)">
            哈希加密一个字符串
        </member>
        <member name="M:IFramework.Utility.Encryption.RsaEncryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
        </member>
        <member name="T:IFramework.Utility.Encryption.XorEncryption">
            <summary>
            加密解密相关的实用函数。
            </summary>
        </member>
        <member name="M:IFramework.Utility.Encryption.XorEncryption.GetXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于 0，则计算整个二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:IFramework.Utility.Encryption.XorEncryption.GetSelfXorBytes(System.Byte[],System.Byte[])">
            此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
        </member>
        <member name="T:IFramework.Utility.Verifier">
            校验相关的实用函数。
        </member>
        <member name="M:IFramework.Utility.Verifier.GetCrc32(System.Byte[])">
            计算二进制流的 CRC32。
        </member>
        <member name="M:IFramework.Utility.Verifier.GetCrc32(System.String)">
            计算指定文件的 CRC32。
        </member>
        <member name="M:IFramework.Utility.Verifier.GetMD5(System.Byte[])">
            计算二进制流的 MD5。
        </member>
        <member name="T:IFramework.Utility.Verifier.Crc32">
            <summary>
            CRC32 算法。
            </summary>
        </member>
        <member name="F:IFramework.Utility.Verifier.Crc32.DefaultPolynomial">
            默认多项式。
        </member>
        <member name="F:IFramework.Utility.Verifier.Crc32.DefaultSeed">
            默认种子数。
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.#ctor">
            初始化 CRC32 类的新实例。
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.#ctor(System.UInt32,System.UInt32)">
            初始化 CRC32 类的新实例。
            <param name="polynomial">指定的多项式。</param>
            <param name="seed">指定的种子数。</param>
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.Initialize">
            初始化 Crc32 类的实现。
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            将写入对象的数据路由到哈希算法以计算哈希值。
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.HashFinal">
            在加密流对象处理完最后的数据后完成哈希计算。
        </member>
    </members>
</doc>
